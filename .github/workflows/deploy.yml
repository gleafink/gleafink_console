name: Build and deploy an app to AKS

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest

    environment: dev
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CREDENTIALS }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          allow-no-subscriptions: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to registry
        uses: docker/login-action@v1
        with:
          registry: ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/
          username: ${{ vars.AZURE_CONTAINER_REGISTRY }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_SECRET }}

      - name: docker build
        env:
          NODE_OPTIONS: --max-old-space-size=4096
        run: docker build -t '${{ vars.CONTAINER_NAME }}:${{github.sha}}' .

      - name: tag docker image
        run: docker image tag '${{ vars.CONTAINER_NAME }}:${{github.sha}}' '${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}'

      - name: push docker image
        run: docker push '${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}'


  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage]
    environment: dev
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CREDENTIALS }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          allow-no-subscriptions: true


      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v1
        with:
          # creds: ${{ secrets.AZURE_CREDENTIALS }}
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CREDENTIALS }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          cluster-name: ${{ vars.CLUSTER_NAME }}
          resource-group: ${{ vars.RESOURCE_GROUP }}

      - name: Create ACR Pull Secret if it does not exist
        run: |
          if ! kubectl get secret ${{vars.IMAGE_PULL_SECRET_NAME}} --namespace=${{vars.NAMESPACE}}; then
            kubectl create secret docker-registry ${{vars.IMAGE_PULL_SECRET_NAME}} \
              --docker-server=${{ vars.ACR_LOGIN_SERVER }} \
              --docker-username=${{ vars.AZURE_CONTAINER_REGISTRY }} \
              --docker-password=${{ secrets.AZURE_CONTAINER_REGISTRY_SECRET }} \
              --namespace=${{vars.NAMESPACE}}
          else
            echo "Secret acr-pull-secret already exists"
          fi

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          namespace: ${{vars.NAMESPACE}}
          action: deploy
          manifests: ${{ vars.DEPLOYMENT_MANIFEST_PATH }}
          images: |
            ${{ vars.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ vars.CONTAINER_NAME }}:${{ github.sha }}
          imagepullsecrets: "${{ secrets.IMAGE_PULL_SECRET_NAME }}"
